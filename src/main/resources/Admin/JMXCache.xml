<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.3" reference="Admin.JMXCache" locale="">
  <web>Admin</web>
  <name>JMXCache</name>
  <parent>Admin.Tools</parent>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1591693879000</creationDate>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1593080725000</date>
  <contentUpdateDate>1593080725000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
import java.lang.management.ManagementFactory;
import javax.management.MBeanServer;
import javax.management.ObjectName;

println """* [[Show cache info&gt;&gt;||queryString=""]]"""
println """* [[Show cache details&gt;&gt;||queryString="details=1"]]"""
println """* [[Confirm flush JMX only&gt;&gt;||queryString="confirm=1"]]"""
println """* [[Confirm flush JMX and xwiki flushCache&gt;&gt;||queryString="confirm=1&amp;&amp;flush=1"]]"""

if (!request.details) {
  println "= Cache info ="
} else {
  println "= Cache details ="
}

MBeanServer server = ManagementFactory.getPlatformMBeanServer();
def queryConfig = new ObjectName("org.xwiki.infinispan:component=Configuration,*")
def configNames = server.queryNames(queryConfig, null)
def sizes = [:]
configNames.each {
  def mbean = new GroovyMBean(server, it)
  def name = it.getKeyProperty('name')
  sizes[name] = mbean.getProperty("evictionSize")
}

def query = new ObjectName("org.xwiki.infinispan:component=Statistics,*")
def names = server.queryNames(query, null)
names.each {
  def mbean = new GroovyMBean(server, it)
  def name = it.getKeyProperty('name')
  if (request.details) {
    println "== Cache: ${name} =="
    println "evictionSize: ${sizes[name]}"
    for(attr in mbean.listAttributeNames()) {
      try {
        println "* ${attr}: ${mbean.getProperty(attr)}"
      } catch (Exception e) {
        println "* ${attr}: (% style=\"color:red\"%)N/A(%%)"
      }
    }
  } else {
    println "* ${name}: size: ${mbean.getProperty("numberOfEntries")}/${sizes[name]}"
  }
}


if (request.confirm) {
  println "= Flushing cache ="
  query = new ObjectName("org.xwiki.infinispan:component=Cache,*")
  names = server.queryNames(query, null)
  names.each {
    def mbean = new GroovyMBean(server, it)
    try {
      mbean.invokeMethod('clear', new Object[0])
      println "* Cache: ${it.getKeyProperty('name')}: flushed"
    } catch (e) {
      println "* Cache: ${it.getKeyProperty('name')}: flush FAILED ${e.getMessage()}"
    }
  }
  if (request.flush)
    xwiki.flushCache()
  println "Cache flushed"

  println "= Cache info after flushing ="
  query = new ObjectName("org.xwiki.infinispan:component=Statistics,*")
  names = server.queryNames(query, null)
  names.each {
   def mbean = new GroovyMBean(server, it)
   println "* Cache: ${it.getKeyProperty('name')}: ${mbean.getProperty("numberOfEntries")}"
  }
} else {
  println ""
  println """[[Confirm flush JMX and xwiki caches&gt;&gt;||queryString="confirm=1"]]"""
}
{{/groovy}}</content>
</xwikidoc>
